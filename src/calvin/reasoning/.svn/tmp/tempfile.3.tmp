<<<<<<< .mine
#this module defines all my rules (right at the moment)
#eventually these may get split up, if they're too hard to deal with as one file :P

from rules import *
from conclusions import Conclusion
from confidence import *
from guards import *
import samples


def __minusFun(x, y):
    return x-y

def __plusFun(x, y):
    return x+y

def __mulFun(x, y):
    return x*y

__minusFun.userDisp = {'infix':True, 'text':'-'}
__plusFun.userDisp = {'infix':True, 'text':'+'}
__mulFun.userDisp = {'infix':True, 'text':'*'}


"""
Construction of a rule:

conclusion,
[list of rhs items]
rule quality (may be a tuple. if so, it is (quality if true, quality if false)
guard (may be missing),
confidence template (may be missing)

both guards and templates should be referenced by name, to avoid problems 
    (guard=, template=)

Conclusions: conclusion name, [optional list of conclusion parameters]
Guards: information retrieval function (NOT function name), [function parameters],
        comparison value, optional comparison function (NOT function name)
Templates contain: 
        priority - whether the confidences in the RHS are combined AND-style or OR-style
        increment - which direction and how much the match closeness is incremented
        flip - whether the true/falseness of the RHS combination is flipped

rhs items:
Observation: function name (in observations.py), [function parameters]
Calculation: function name (in calculataion.py), [function parameters], variable name for rest of rule
Simulation: function name (in simulations.py), [function parameters], variable name for rest of rule (may be None)
Argument: conclusion name, [optional list of conclusion parameters]

if any function parameter is a tuple, it is interpreted as a function to be run. The first value
should be the function to run (NOT function name), the second value should be a tuple of parameters
to the function.
"""


#top-level conclusions
#no process
makeRule(Conclusion("no process"),  
         [Argument("ages line up")], 
         Validity.accept)

makeRule(Conclusion('no process'),
         [Calculation('calcMean', ['age'], 'mean age'),
          Argument('acceptable age', ['mean age'])],
         (Validity.plaus, Validity.accept))

#matrix erosion
makeRule(Conclusion("matrix erosion"),  
         [Simulation("isLinearGrowth", ["age"], None)], 
         Validity.sound)

makeRule(Conclusion('matrix erosion'),
         [Argument('erosion')],
         Validity.accept)

makeRule(Conclusion('clast erosion'),
         [Argument('erosion')],
         Validity.accept)

makeRule(Conclusion('matrix erosion'),
         [Argument('has matrix')],
         Validity.sound)

#need a rule here that checks the likely erosion rate against boulder heights
#and max age and tells us if they might have been covered ever.

makeRule(Conclusion("erosion"), 
         [Calculation("calcMax", ["age"], "max age"), 
          Observation("gt", ["max age", 50000])], 
         Validity.plaus)

makeRule(Conclusion("matrix erosion"),  
         [Argument("visual matrix erosion")], 
         Validity.prob)

makeRule(Conclusion("erosion"), 
         [Calculation("calcMaxSample", ["age"], "erosion choice"), 
          Argument("representative sample", ["erosion choice", "age"])], 
         Validity.plaus)

makeRule(Conclusion("erosion"), 
         [Calculation("calcMax", ["age"], "erosion age"), 
          Argument("acceptable age", ["erosion age"])], 
         (Validity.plaus, Validity.accept))

makeRule(Conclusion("has matrix"), 
         [Observation("observed", [(samples.getLandformField, ("clast supported",))])],
         Validity.prob, template=Template(flip=True))

makeRule(Conclusion("has matrix"), 
         [Observation("eqs", [(samples.getLandformField, ('type',)), 'moraine']),
          Observation("eqs", [(samples.getLandformField, ('type',)), 'alluvial fan'])],
         Validity.sound)      

makeRule(Conclusion('visual clast erosion'),
         [Observation("thereExists", ["observed", "chicken heads"])],
         Validity.prob, guard=Guard(samples.getLandformField, ["clast supported"], True))

#inheritance
makeRule(Conclusion("inheritance"), 
         [Calculation("calcMean", ["age uncertainty"], "meanErr"), 
          Argument("all within range", [(__minusFun, ("meanErr", 1000)), 
                                        (__plusFun, ("meanErr", 1000)), "age uncertainty"])], 
         Validity.plaus, template=Template(increment=-1, flip=True))

makeRule(Conclusion("inheritance"), 
         [Calculation("calcMinSample", ["age"], "inheritance choice"), 
          Argument("representative sample", ["inheritance choice", "age"])], 
         Validity.plaus)

makeRule(Conclusion("inheritance"), 
         [Calculation("calcMin", ["age"], "inheritance age"), 
          Argument("acceptable age", ["inheritance age"])], 
         (Validity.plaus, Validity.accept))

makeRule(Conclusion("inheritance"), 
         [Simulation("inheritanceShaped", [], None)], 
         Validity.sound)

makeRule(Conclusion("inheritance"),
         [Observation("eqs", [(samples.getLandformField, ("type",)), "moraine"])],
         Validity.plaus, 
         guard=Guard(samples.getLandformField, ["type"], "moraine"))

makeRule(Conclusion("inheritance"),
         [Observation("eqs", [(samples.getLandformField, ("type",)), "lava flow"])],
         Validity.sound,
         guard=Guard(samples.getLandformField, ["type"], "lava flow"),
         template=Template(flip=True))

makeRule(Conclusion("inheritance"),
         [Simulation("inheritanceOkay", [], None)],
         (Validity.plaus, Validity.accept))

#snow cover
makeRule(Conclusion("snow cover"), 
         [Simulation("correlated", ["age", "boulder size", +1], None)],
         (Validity.sound, Validity.prob), template=Template(increment=-1))

makeRule(Conclusion("snow cover"), 
         [Simulation("correlated", ["elevation", "age", -1], None)], 
         Validity.sound, 
         guard=Guard(findRange, ["elevation"], 1500, lambda x, y: x > y))

makeRule(Conclusion("snow cover"), 
         [Calculation("calcMean", ["latitude"], "latitude"), 
          Calculation("calcMax", ["elevation"], "elevation"), 
          Argument("is cold", ["latitude", "elevation"])], 
         (Validity.plaus, Validity.sound))

#vegetation cover
makeRule(Conclusion("vegetation cover"), 
         [Simulation("correlated", ["elevation", "age", +1], None)], 
         Validity.sound, 
         guard=Guard(findRange, ["elevation"], 500, lambda x, y: x > y))

#outlier
makeRule(Conclusion("outlier", ["sample"]),
         [Argument("different origin", ["sample"])], 
         Validity.accept)

makeRule(Conclusion("outlier", ["sample"]), 
         [Simulation("argueWithoutSample", ["sample", "no process"], None)], 
         (Validity.sound, Validity.prob))

makeRule(Conclusion("outlier", ["sample"]), 
         [Simulation("skewsField", ["sample", "age uncertainty"], None)], 
         Validity.sound, template=Template(increment=-1))

makeRule(Conclusion('outlier', ['sample']), 
         [Simulation('skewsField', ['sample', 'age'], None)],
         Validity.accept, template=Template(increment=1))

makeRule(Conclusion('outlier', ['sample']),
         [Argument('no process')],
         Validity.accept, template=Template(increment=+1, flip=True))



#non-primary conclusions
makeRule(Conclusion("ages line up"), 
         [Simulation("checkOverlap", ['age', 'age uncertainty'], None)], 
         Validity.accept, template=Template(increment=1))

makeRule(Conclusion("all within range", ["bottom", "top", "field"]), 
         [Observation("forAll", ["gt", "field", "bottom"]), 
          Observation("forAll", ["lt", "field", "top"])], 
         Validity.accept, template=Template(priority=True))

makeRule(Conclusion("is cold", ["latitude", "elevation"]), 
         [Observation("gt", ["elevation", 8000]), 
          Observation("gt", ["latitude", 15]),
          Observation("lt", ["latitude", -15])], 
         Validity.sound)

makeRule(Conclusion("visual matrix erosion"),
         [Observation("observed", [(samples.getLandformField, ("flat crested",))])], 
         Validity.sound, 
         guard=Guard(samples.getLandformField, ["type"], "moraine"))

makeRule(Conclusion("visual clast erosion"), 
         [Observation("observed", [(samples.getLandformField, ("pitted",))])], 
         Validity.sound, 
         guard=Guard(samples.getLandformField, ["type"], "lava flow"))

makeRule(Conclusion("different origin", ["sample"]), 
         [Observation("observed", [(samples.extractField, ("sample", "in matrix"))])], 
         Validity.prob, 
         guard=Guard(samples.getLandformField, ["type"], "moraine"), 
         template=Template(flip=True))

makeRule(Conclusion("different origin", ["sample"]), 
         [Observation("observed", [(samples.extractField, ("sample", "bedrock"))])], 
         (Validity.accept, Validity.plaus), template=Template(flip=True))

makeRule(Conclusion("different origin", ["sample"]), 
         [Simulation("differentChemistry", ["sample"], None)], 
         Validity.prob,
         #single source landform -> single chemical composition
         guard=Guard(samples.getLandformField, ['type'], 'lava flow'))

makeRule(Conclusion("representative sample", ["sample", "field"]),
         [Simulation("skewsField", ["sample", "field"], None)], 
         Validity.sound, template=Template(increment=-1, flip=True))

makeRule(Conclusion("acceptable age", ["sample age"]),
         [Argument('fits minimum', ['sample age']), 
          Argument('fits maximum', ['sample age']),
          Argument('same as known', ['sample age'])],
         Validity.accept, template=Template(priority=True))

makeRule(Conclusion('fits minimum', ['sample age']),
         [Observation('gt', ['sample age', (samples.getLandformField, ('minimum age',))]),
          Argument('invalid data', ['minimum age'])],
          Validity.accept)

makeRule(Conclusion('fits maximum', ['sample age']),
         [Observation('lt', ['sample age', (samples.getLandformField, ('maximum age',))]),
          Argument('invalid data', ['maximum age'])],
          Validity.accept)

makeRule(Conclusion('same as known', ['sample age']),
         [Observation('neareq', ['sample age', (samples.getLandformField, ('known age',))]),
          Argument('invalid data', ['known age'])],
          Validity.accept)=======
"""
rule_list.py

* Copyright (c) 2006-2009, University of Colorado.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the University of Colorado nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF COLORADO ''AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF COLORADO BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

#this module defines all my rules (right at the moment)
#eventually these may get split up, if they're too hard to deal with as one file :P

from rules import *
from conclusions import Conclusion
from confidence import *
from guards import *
import samples


def __minusFun(x, y):
    return x-y

def __plusFun(x, y):
    return x+y

def __mulFun(x, y):
    return x*y

__minusFun.userDisp = {'infix':True, 'text':'-'}
__plusFun.userDisp = {'infix':True, 'text':'+'}
__mulFun.userDisp = {'infix':True, 'text':'*'}


"""
Construction of a rule:

conclusion,
[list of rhs items]
rule quality (may be a tuple. if so, it is (quality if true, quality if false)
guard (may be missing),
confidence template (may be missing)

both guards and templates should be referenced by name, to avoid problems 
    (guard=, template=)

Conclusions: conclusion name, [optional list of conclusion parameters]
Guards: information retrieval function (NOT function name), [function parameters],
        comparison value, optional comparison function (NOT function name)
Templates contain: 
        priority - whether the confidences in the RHS are combined AND-style or OR-style
        increment - which direction and how much the match closeness is incremented
        flip - whether the true/falseness of the RHS combination is flipped

rhs items:
Observation: function name (in observations.py), [function parameters]
Calculation: function name (in calculataion.py), [function parameters], variable name for rest of rule
Simulation: function name (in simulations.py), [function parameters], variable name for rest of rule (may be None)
Argument: conclusion name, [optional list of conclusion parameters]

if any function parameter is a tuple, it is interpreted as a function to be run. The first value
should be the function to run (NOT function name), the second value should be a tuple of parameters
to the function.
"""


#top-level conclusions
#no process
makeRule(Conclusion("no process"),  
         [Argument("ages line up")], 
         Validity.accept)

#erosion
makeRule(Conclusion("erosion"),  
         [Simulation("isLinearGrowth", ["age"], None)], 
         Validity.sound)

makeRule(Conclusion("erosion"), 
         [Calculation("calcMax", ["age"], "max age"), 
          Observation("gt", ["max age", 50000])], 
         Validity.plaus)

makeRule(Conclusion("erosion"),  
         [Argument("visual erosion")], 
         Validity.prob)

makeRule(Conclusion("erosion"), 
         [Calculation("calcMaxSample", ["age"], "erosion choice"), 
          Argument("representative sample", ["erosion choice", "age"])], 
         Validity.plaus)

makeRule(Conclusion("erosion"), 
         [Calculation("calcMaxSample", ["age"], "erosion choice"), 
          Argument("acceptable sample", ["erosion choice"])], 
         (Validity.plaus, Validity.accept))

makeRule(Conclusion("erosion"), 
         [Observation("eqs", [(samples.getLandformField, ("type",)), "moraine"])],
         Validity.plaus, 
         guard=Guard(samples.getLandformField, ["type"], "moraine"))

#inheritance
makeRule(Conclusion("inheritance"), 
         [Calculation("calcMean", ["age uncertainty"], "meanErr"), 
          Argument("all within range", [(__minusFun, ("meanErr", 1000)), 
                                        (__plusFun, ("meanErr", 1000)), "age uncertainty"])], 
         Validity.plaus, template=Template(increment=-1, flip=True))

makeRule(Conclusion("inheritance"), 
         [Calculation("calcMinSample", ["age"], "inheritance choice"), 
          Argument("representative sample", ["inheritance choice", "age"])], 
         Validity.plaus)

makeRule(Conclusion("inheritance"), 
         [Calculation("calcMinSample", ["age"], "inheritance choice"), 
          Argument("acceptable sample", ["inheritance choice"])], 
         (Validity.plaus, Validity.accept))

makeRule(Conclusion("inheritance"), 
         [Simulation("inheritanceShaped", [], None)], 
         Validity.sound)

makeRule(Conclusion("inheritance"),
         [Observation("eqs", [(samples.getLandformField, ("type",)), "moraine"])],
         Validity.plaus, 
         guard=Guard(samples.getLandformField, ["type"], "moraine"),)

makeRule(Conclusion("inheritance"),
         [Observation("eqs", [(samples.getLandformField, ("type",)), "lava flow"])],
         Validity.sound,
         guard=Guard(samples.getLandformField, ["type"], "lava flow"),
         template=Template(flip=True))

makeRule(Conclusion("inheritance"),
         [Simulation("inheritanceOkay", [], None)],
         (Validity.plaus, Validity.accept))

#snow cover
makeRule(Conclusion("snow cover"), 
         [Simulation("correlated", ["age", "boulder size", +1], None)],
         (Validity.sound, Validity.prob), template=Template(increment=-1))

makeRule(Conclusion("snow cover"), 
         [Simulation("correlated", ["elevation", "age", -1], None)], 
         Validity.sound, 
         guard=Guard(findRange, ["elevation"], 1500, lambda x, y: x > y))

makeRule(Conclusion("snow cover"), 
         [Calculation("calcMean", ["latitude"], "latitude"), 
          Calculation("calcMax", ["elevation"], "elevation"), 
          Argument("is cold", ["latitude", "elevation"])], 
         (Validity.plaus, Validity.sound))

#vegetation cover
makeRule(Conclusion("vegetation cover"), 
         [Simulation("correlated", ["elevation", "age", +1], None)], 
         Validity.sound, 
         guard=Guard(findRange, ["elevation"], 500, lambda x, y: x > y))

#outlier
makeRule(Conclusion("outlier", ["sample"]),
         [Argument("different origin", ["sample"])], 
         Validity.accept)

makeRule(Conclusion("outlier", ["sample"]), 
         [Simulation("argueWithoutSample", ["sample", "no process"], None)], 
         (Validity.sound, Validity.prob))

makeRule(Conclusion("outlier", ["sample"]), 
         [Simulation("skewsField", ["sample", "age uncertainty"], None)], 
         Validity.sound, template=Template(increment=-1))

makeRule(Conclusion('outlier', ['sample']), 
         [Simulation('skewsField', ['sample', 'age'], None)],
         Validity.accept, template=Template(increment=1))



#non-primary conclusions
makeRule(Conclusion("ages line up"), 
         [Simulation("checkOverlap", ['age', 'age uncertainty'], None)], 
         Validity.accept, template=Template(increment=1))

makeRule(Conclusion("all within range", ["bottom", "top", "field"]), 
         [Observation("forAll", ["gt", "field", "bottom"]), 
          Observation("forAll", ["lt", "field", "top"])], 
         Validity.accept, template=Template(priority=True))

makeRule(Conclusion("is cold", ["latitude", "elevation"]), 
         [Observation("gt", ["elevation", 8000]), 
          Observation("gt", ["latitude", 15]),
          Observation("lt", ["latitude", -15])], 
         Validity.sound)

makeRule(Conclusion("visual erosion"),
         [Observation("observed", [(samples.getLandformField, ("flat crested",))])], 
         Validity.sound, 
         guard=Guard(samples.getLandformField, ["type"], "moraine"))

makeRule(Conclusion("visual erosion"), 
         [Observation("observed", [(samples.getLandformField, ("pitted",))])], 
         Validity.sound, 
         guard=Guard(samples.getLandformField, ["type"], "lava flow"))

makeRule(Conclusion("different origin", ["sample"]), 
         [Observation("observed", [(samples.extractField, ("sample", "in matrix"))])], 
         Validity.prob, 
         guard=Guard(samples.getLandformField, ["type"], "moraine"), 
         template=Template(flip=True))

makeRule(Conclusion("different origin", ["sample"]), 
         [Observation("observed", [(samples.extractField, ("sample", "bedrock"))])], 
         (Validity.accept, Validity.plaus), template=Template(flip=True))

makeRule(Conclusion("different origin", ["sample"]), 
         [Simulation("differentChemistry", ["sample"], None)], 
         Validity.prob,
         #single source landform -> single chemical composition
         guard=Guard(samples.getLandformField, ['type'], 'lava flow'))

makeRule(Conclusion("representative sample", ["sample", "field"]),
         [Simulation("skewsField", ["sample", "field"], None)], 
         Validity.sound, template=Template(increment=-1, flip=True))

makeRule(Conclusion("acceptable sample", ["sample"]),
         [Observation("gt", [(samples.extractField, ("sample", "age")), 
                             (samples.getLandformField, ("minimum age",))]), 
          Observation("lt", [(samples.extractField, ("sample", "age")), 
                             (samples.getLandformField, ("maximum age",))])], 
         Validity.accept, template=Template(priority=True))
    



>>>>>>> .r172
